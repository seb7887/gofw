// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	eventbus "github.com/seb7887/gofw/eventbus"
	mock "github.com/stretchr/testify/mock"
)

// Bus is an autogenerated mock type for the Bus type
type Bus struct {
	mock.Mock
}

type Bus_Expecter struct {
	mock *mock.Mock
}

func (_m *Bus) EXPECT() *Bus_Expecter {
	return &Bus_Expecter{mock: &_m.Mock}
}

// Publish provides a mock function with given fields: topic, msg
func (_m *Bus) Publish(topic string, msg interface{}) error {
	ret := _m.Called(topic, msg)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = rf(topic, msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Bus_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type Bus_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - topic string
//   - msg interface{}
func (_e *Bus_Expecter) Publish(topic interface{}, msg interface{}) *Bus_Publish_Call {
	return &Bus_Publish_Call{Call: _e.mock.On("Publish", topic, msg)}
}

func (_c *Bus_Publish_Call) Run(run func(topic string, msg interface{})) *Bus_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}))
	})
	return _c
}

func (_c *Bus_Publish_Call) Return(_a0 error) *Bus_Publish_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Bus_Publish_Call) RunAndReturn(run func(string, interface{}) error) *Bus_Publish_Call {
	_c.Call.Return(run)
	return _c
}

// Subscribe provides a mock function with given fields: topic, handler
func (_m *Bus) Subscribe(topic string, handler eventbus.MessageReceiver) {
	_m.Called(topic, handler)
}

// Bus_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type Bus_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - topic string
//   - handler eventbus.MessageReceiver
func (_e *Bus_Expecter) Subscribe(topic interface{}, handler interface{}) *Bus_Subscribe_Call {
	return &Bus_Subscribe_Call{Call: _e.mock.On("Subscribe", topic, handler)}
}

func (_c *Bus_Subscribe_Call) Run(run func(topic string, handler eventbus.MessageReceiver)) *Bus_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(eventbus.MessageReceiver))
	})
	return _c
}

func (_c *Bus_Subscribe_Call) Return() *Bus_Subscribe_Call {
	_c.Call.Return()
	return _c
}

func (_c *Bus_Subscribe_Call) RunAndReturn(run func(string, eventbus.MessageReceiver)) *Bus_Subscribe_Call {
	_c.Run(run)
	return _c
}

// NewBus creates a new instance of Bus. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBus(t interface {
	mock.TestingT
	Cleanup(func())
}) *Bus {
	mock := &Bus{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
