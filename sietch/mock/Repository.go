// Code generated by mockery v2.46.2. DO NOT EDIT.

package mock

import (
	context "context"

	sietch "github.com/seb7887/gofw/sietch"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository[T any, ID comparable] struct {
	mock.Mock
}

type Repository_Expecter[T any, ID comparable] struct {
	mock *mock.Mock
}

func (_m *Repository[T, ID]) EXPECT() *Repository_Expecter[T, ID] {
	return &Repository_Expecter[T, ID]{mock: &_m.Mock}
}

// BatchCreate provides a mock function with given fields: ctx, items
func (_m *Repository[T, ID]) BatchCreate(ctx context.Context, items []T) error {
	ret := _m.Called(ctx, items)

	if len(ret) == 0 {
		panic("no return value specified for BatchCreate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []T) error); ok {
		r0 = rf(ctx, items)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_BatchCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchCreate'
type Repository_BatchCreate_Call[T any, ID comparable] struct {
	*mock.Call
}

// BatchCreate is a helper method to define mock.On call
//   - ctx context.Context
//   - items []T
func (_e *Repository_Expecter[T, ID]) BatchCreate(ctx interface{}, items interface{}) *Repository_BatchCreate_Call[T, ID] {
	return &Repository_BatchCreate_Call[T, ID]{Call: _e.mock.On("BatchCreate", ctx, items)}
}

func (_c *Repository_BatchCreate_Call[T, ID]) Run(run func(ctx context.Context, items []T)) *Repository_BatchCreate_Call[T, ID] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]T))
	})
	return _c
}

func (_c *Repository_BatchCreate_Call[T, ID]) Return(_a0 error) *Repository_BatchCreate_Call[T, ID] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_BatchCreate_Call[T, ID]) RunAndReturn(run func(context.Context, []T) error) *Repository_BatchCreate_Call[T, ID] {
	_c.Call.Return(run)
	return _c
}

// BatchDelete provides a mock function with given fields: ctx, items
func (_m *Repository[T, ID]) BatchDelete(ctx context.Context, items []ID) error {
	ret := _m.Called(ctx, items)

	if len(ret) == 0 {
		panic("no return value specified for BatchDelete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []ID) error); ok {
		r0 = rf(ctx, items)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_BatchDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchDelete'
type Repository_BatchDelete_Call[T any, ID comparable] struct {
	*mock.Call
}

// BatchDelete is a helper method to define mock.On call
//   - ctx context.Context
//   - items []ID
func (_e *Repository_Expecter[T, ID]) BatchDelete(ctx interface{}, items interface{}) *Repository_BatchDelete_Call[T, ID] {
	return &Repository_BatchDelete_Call[T, ID]{Call: _e.mock.On("BatchDelete", ctx, items)}
}

func (_c *Repository_BatchDelete_Call[T, ID]) Run(run func(ctx context.Context, items []ID)) *Repository_BatchDelete_Call[T, ID] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]ID))
	})
	return _c
}

func (_c *Repository_BatchDelete_Call[T, ID]) Return(_a0 error) *Repository_BatchDelete_Call[T, ID] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_BatchDelete_Call[T, ID]) RunAndReturn(run func(context.Context, []ID) error) *Repository_BatchDelete_Call[T, ID] {
	_c.Call.Return(run)
	return _c
}

// BatchUpdate provides a mock function with given fields: ctx, items
func (_m *Repository[T, ID]) BatchUpdate(ctx context.Context, items []T) error {
	ret := _m.Called(ctx, items)

	if len(ret) == 0 {
		panic("no return value specified for BatchUpdate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []T) error); ok {
		r0 = rf(ctx, items)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_BatchUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchUpdate'
type Repository_BatchUpdate_Call[T any, ID comparable] struct {
	*mock.Call
}

// BatchUpdate is a helper method to define mock.On call
//   - ctx context.Context
//   - items []T
func (_e *Repository_Expecter[T, ID]) BatchUpdate(ctx interface{}, items interface{}) *Repository_BatchUpdate_Call[T, ID] {
	return &Repository_BatchUpdate_Call[T, ID]{Call: _e.mock.On("BatchUpdate", ctx, items)}
}

func (_c *Repository_BatchUpdate_Call[T, ID]) Run(run func(ctx context.Context, items []T)) *Repository_BatchUpdate_Call[T, ID] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]T))
	})
	return _c
}

func (_c *Repository_BatchUpdate_Call[T, ID]) Return(_a0 error) *Repository_BatchUpdate_Call[T, ID] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_BatchUpdate_Call[T, ID]) RunAndReturn(run func(context.Context, []T) error) *Repository_BatchUpdate_Call[T, ID] {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, item
func (_m *Repository[T, ID]) Create(ctx context.Context, item *T) error {
	ret := _m.Called(ctx, item)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *T) error); ok {
		r0 = rf(ctx, item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type Repository_Create_Call[T any, ID comparable] struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - item *T
func (_e *Repository_Expecter[T, ID]) Create(ctx interface{}, item interface{}) *Repository_Create_Call[T, ID] {
	return &Repository_Create_Call[T, ID]{Call: _e.mock.On("Create", ctx, item)}
}

func (_c *Repository_Create_Call[T, ID]) Run(run func(ctx context.Context, item *T)) *Repository_Create_Call[T, ID] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*T))
	})
	return _c
}

func (_c *Repository_Create_Call[T, ID]) Return(_a0 error) *Repository_Create_Call[T, ID] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_Create_Call[T, ID]) RunAndReturn(run func(context.Context, *T) error) *Repository_Create_Call[T, ID] {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *Repository[T, ID]) Delete(ctx context.Context, id ID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type Repository_Delete_Call[T any, ID comparable] struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id ID
func (_e *Repository_Expecter[T, ID]) Delete(ctx interface{}, id interface{}) *Repository_Delete_Call[T, ID] {
	return &Repository_Delete_Call[T, ID]{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *Repository_Delete_Call[T, ID]) Run(run func(ctx context.Context, id ID)) *Repository_Delete_Call[T, ID] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ID))
	})
	return _c
}

func (_c *Repository_Delete_Call[T, ID]) Return(_a0 error) *Repository_Delete_Call[T, ID] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_Delete_Call[T, ID]) RunAndReturn(run func(context.Context, ID) error) *Repository_Delete_Call[T, ID] {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, id
func (_m *Repository[T, ID]) Get(ctx context.Context, id ID) (*T, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *T
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ID) (*T, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ID) *T); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*T)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Repository_Get_Call[T any, ID comparable] struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id ID
func (_e *Repository_Expecter[T, ID]) Get(ctx interface{}, id interface{}) *Repository_Get_Call[T, ID] {
	return &Repository_Get_Call[T, ID]{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *Repository_Get_Call[T, ID]) Run(run func(ctx context.Context, id ID)) *Repository_Get_Call[T, ID] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ID))
	})
	return _c
}

func (_c *Repository_Get_Call[T, ID]) Return(_a0 *T, _a1 error) *Repository_Get_Call[T, ID] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_Get_Call[T, ID]) RunAndReturn(run func(context.Context, ID) (*T, error)) *Repository_Get_Call[T, ID] {
	_c.Call.Return(run)
	return _c
}

// Query provides a mock function with given fields: ctx, filter
func (_m *Repository[T, ID]) Query(ctx context.Context, filter *sietch.Filter) ([]T, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 []T
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sietch.Filter) ([]T, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sietch.Filter) []T); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]T)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sietch.Filter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type Repository_Query_Call[T any, ID comparable] struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - ctx context.Context
//   - filter *sietch.Filter
func (_e *Repository_Expecter[T, ID]) Query(ctx interface{}, filter interface{}) *Repository_Query_Call[T, ID] {
	return &Repository_Query_Call[T, ID]{Call: _e.mock.On("Query", ctx, filter)}
}

func (_c *Repository_Query_Call[T, ID]) Run(run func(ctx context.Context, filter *sietch.Filter)) *Repository_Query_Call[T, ID] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sietch.Filter))
	})
	return _c
}

func (_c *Repository_Query_Call[T, ID]) Return(_a0 []T, _a1 error) *Repository_Query_Call[T, ID] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_Query_Call[T, ID]) RunAndReturn(run func(context.Context, *sietch.Filter) ([]T, error)) *Repository_Query_Call[T, ID] {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, item
func (_m *Repository[T, ID]) Update(ctx context.Context, item *T) error {
	ret := _m.Called(ctx, item)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *T) error); ok {
		r0 = rf(ctx, item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type Repository_Update_Call[T any, ID comparable] struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - item *T
func (_e *Repository_Expecter[T, ID]) Update(ctx interface{}, item interface{}) *Repository_Update_Call[T, ID] {
	return &Repository_Update_Call[T, ID]{Call: _e.mock.On("Update", ctx, item)}
}

func (_c *Repository_Update_Call[T, ID]) Run(run func(ctx context.Context, item *T)) *Repository_Update_Call[T, ID] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*T))
	})
	return _c
}

func (_c *Repository_Update_Call[T, ID]) Return(_a0 error) *Repository_Update_Call[T, ID] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_Update_Call[T, ID]) RunAndReturn(run func(context.Context, *T) error) *Repository_Update_Call[T, ID] {
	_c.Call.Return(run)
	return _c
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository[T any, ID comparable](t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository[T, ID] {
	mock := &Repository[T, ID]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
